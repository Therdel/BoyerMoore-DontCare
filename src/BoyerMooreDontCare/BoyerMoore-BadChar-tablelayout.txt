Needle		krakotat
Pos			76543210

index				0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25
letter				a	b	c	d	e	f	g	h	i	j	k	l	m	n	o	p	q	r	s	t	u	v	w	x	y	z
'/' in the Table
means '0' like all
empty fields.

Exhaustive Shift																											Speicherplatz:
		t	0		1										4				3			6		2								size(∑) * size(Needle)
		a	1												3				2			5		1						
		t	2		3										2				1			4									Beispiel Bytemuster Länge 23
		o	3		2										1							3										    256 * 23 = 5888B = 5.75KB
		k	4		1																	2								
		a	5												2							1								
		r	6												1															
		k	7																											

First letter Array + consecutive Arra
struct EntryStruct {
	int firstShift;
	EntryStruct *nextPosition;
}

		t	0		1,ptr									4, ptr			3,null		6,null	2,null							
Formel:
size_t pos = needle_size-1;

for(int needle_index = needle_size-1;
		needle_index > 0;
	  --needle_index) {
	char hay_letter = text[pos + needle_index];
	if(needle[needle_index] == hay_letter) {		// match
		continue;
	} else {										// mismatch
		// badChar Rule:
		char shiftTable = table[hay_letter].firstShift;
		int matchLength = needle_size - needle_index - 1;
		int shift = shiftTable - matchLength;
		if(shift>0) {
			// recommend shift by shift
			break;
		} else if(shift == 0) {
			// happens when first needlepos mismatches
			// and the hay letter doesn't occur anymore.
		} else {
			// past the (if any) first occurence of hay_letter in the needle.
			if(table[hay_letter].nextPosition != nullptr) {
				// linear search for next occurance
			} else {								// no further occurance in needle
				// recommend shift to after needle pos
			}
		}
	}
}

bspw. mehlsack
      krakotat
	         ^
			 
needle_index	= 0
hay_letter		= k
										0		 1
Good-Suffix:		Beispiel: Idx i:	123456789012345678
							   Text:	prstabstubabvqxrst
							Pattern:	  qcabdabdab
										         ^   		Mismatch index i=10, good suffix t='ab'
				 shift by Weak rule:         qcabdabdab		As the letter after next suffix occurance hasn't changed: Instant mismatch guarantee
			   shift by STRONG rule:		    qcabdabdab	<-- Desired
			   
			L(i) := weak good suffix right index of rightmost copy of P[i..n]
			L'(i):= strong rule, char preceding suffix (mismatch character) is different in copy than preceding original suffix. P(i-1) != P(L'(i-1))
			l'(i):= prefix rule, length of longest suffix of P[i..n] that's also a P-prefix
			
			wenn L'(i) existiert (!=0), L'(i) für shift verwenden. Ansonsten l'(i).
			Wenn P gefunden, shiften by n-l'(2)
			Wenn 1. letter mismatched, dann shift um 1 Position